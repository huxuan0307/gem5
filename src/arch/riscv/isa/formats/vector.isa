output exec {{
    uint64_t
    SEW(const uint64_t vtype)
    {
        return 8 << bits(vtype, 5, 3);
    }

    /*
    * Encode LMUL to lmul as follows:
    *     LMUL    vlmul    lmul
    *      1       000       0
    *      2       001       1
    *      4       010       2
    *      8       011       3
    *      -       100       -
    *     1/8      101      -3
    *     1/4      110      -2
    *     1/2      111      -1
    *
    * then, we can calculate VLMAX = vlen >> (vsew + 3 - lmul)
    * e.g. vlen = 256 bits, SEW = 16, LMUL = 1/8
    *      => VLMAX = vlen >> (1 + 3 - (-3))
    *               = 256 >> 7
    *               = 2
    * Ref: https://github.com/qemu/qemu/blob/5e9d14f2/target/riscv/cpu.h
    */
    uint64_t
    VLMAX(const uint64_t vtype)
    {
        int64_t vlmul = (int64_t)sext<3>(bits(vtype, 2, 0));
        int64_t vsew = bits(vtype, 5, 3);
        return gem5::RiscvISA::VLEN >> (vsew + 3 - vlmul);
    }

    /*
     *  Spec Section 4.5
     *  Ref:
     *  https://github.com/qemu/qemu/blob/c7d773ae/target/riscv/vector_helper.c
    */
    int
    elem_mask(const uint64_t *v0, const int index)
    {
        int idx = index / 64;
        int pos = index % 64;
        return (v0[idx] >> pos) & 1;
    }

    void set_vill(uint64_t& vtype)
    {
        vtype = 0x80000000;
    }
}};


def template VConfExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        %(op_decl)s;
        %(op_rd)s;
        %(code)s;

        if (vlmax == 0) {
            set_vill(vtype);
            vl = 0;
        }
        xc->setMiscReg(MISCREG_VL, vl);
        xc->setMiscReg(MISCREG_VTYPE, vtype);
        xc->setMiscReg(MISCREG_VSTART, 0);
        %(op_wb)s;
        return NoFault;
    }
}};

def template VIntExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        uint64_t vl = xc->readMiscReg(MISCREG_VL);
        uint64_t vtype = xc->readMiscReg(MISCREG_VTYPE);
        auto tc = xc->tcBase();
        const RiscvISA::vreg_t& tmp_v0 = tc->readVecReg(RegId(VecRegClass, 0));
        auto v0 = tmp_v0.as<uint64_t>();

        switch (SEW(vtype)) {
            case 8: {
                using vi = int8_t;
                %(op_decl)s;
                %(op_rd)s;
                for (unsigned i = 0; i < vl; i++) {
                    if(vm || elem_mask(v0, i)) {
                        %(code)s;
                    }
                }
                %(op_wb)s;
                break;
            }
            case 16: {
                using vi = int16_t;
                %(op_decl)s;
                %(op_rd)s;
                for (unsigned i = 0; i < vl; i++) {
                    if(vm || elem_mask(v0, i)) {
                        %(code)s;
                    }
                }
                %(op_wb)s;
                break;
            }
            case 32: {
                using vi = int32_t;
                %(op_decl)s;
                %(op_rd)s;
                for (unsigned i = 0; i < vl; i++) {
                    if(vm || elem_mask(v0, i)) {
                        %(code)s;
                    }
                }
                %(op_wb)s;
                break;
            }
            case 64: {
                using vi = int64_t;
                %(op_decl)s;
                %(op_rd)s;
                for (unsigned i = 0; i < vl; i++) {
                    if(vm || elem_mask(v0, i)) {
                        %(code)s;
                    }
                }
                %(op_wb)s;
                break;
            }
            default:
                panic("invalid SEW");
        }

        return NoFault;
    }
}};

def format VIntOp(code, *flags) {{
    iop = InstObjParams(name, Name, 'VIntOp', code, flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VIntExecute.subst(iop)
}};

def format VConfOp(code, *flags) {{
    iop = InstObjParams(name, Name, 'VConfOp', code, flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VConfExecute.subst(iop)
}};

////////////////////////////////////////////////////////////////////
//
// Vector memory operation instructions
//
def template VMemLoadStoreOpDeclare {{
    /**
     * Static instruction class for "%(mnemonic)s".
     */
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(ExtMachInst machInst);

        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
        Fault completeAcc(PacketPtr, ExecContext *,
                          Trace::InstRecord *) const override;
    };
}};

def template VMemLoadStoreOpConstructor {{
    %(class_name)s::%(class_name)s(ExtMachInst machInst):
        %(base_class)s("%(mnemonic)s", machInst, %(op_class)s, 
        (MEW<<3)|WIDTH, VM)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;
    }
}};

let {{
    def VMemLoadStoreOpBase(name, Name, ea_code, memacc_code,
            mem_flags, inst_flags, base_class, postacc_code='',
            decode_template=BasicDecode, exec_template_base=''):
        # Make sure flags are in lists (convert to lists if not).
        mem_flags = makeList(mem_flags)
        inst_flags = makeList(inst_flags)

        iop = InstObjParams(name, Name, base_class,
            {'ea_code': ea_code,
            'memacc_code': memacc_code, 'postacc_code': postacc_code },
            inst_flags)

        if mem_flags:
            mem_flags = [ 'Request::%s' % flag for flag in mem_flags ]
            s = '\n\tthis->memAccessFlags = ' + '|'.join(mem_flags) + ';'
            iop.constructor += s

        # select templates
        fullExecTemplate = eval(exec_template_base + 'Execute')
        initiateAccTemplate = eval(exec_template_base + 'InitiateAcc')
        completeAccTemplate = eval(exec_template_base + 'CompleteAcc')

        # (header_output, decoder_output, decode_block, exec_output)
        return (VMemLoadStoreOpDeclare.subst(iop),
            VMemLoadStoreOpConstructor.subst(iop),
            decode_template.subst(iop),
            fullExecTemplate.subst(iop) +
            initiateAccTemplate.subst(iop) +
            completeAccTemplate.subst(iop))
}};

def template VMemLoadExecute {{
    Fault %(class_name)s::execute(
        ExecContext *xc, Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;
        auto tc = xc->tcBase();
        size_t vl = RiscvStaticInst::getCurVL(tc);

        %(op_decl)s;
        %(op_rd)s;
        %(ea_code)s;

        const std::vector<bool> byte_enable(vl * this->sew, true);

        STATUS status = xc->readMiscReg(MISCREG_STATUS);
        if (status.vs == static_cast<int>(VPUStatus::OFF))
            fault = std::make_shared<IllegalInstFault>("VPU is off", machInst);

        if (fault == NoFault) {
            fault = readMemAtomic(xc, EA, Mem.as<uint8_t>(), 
                vl * this->sew, this->memAccessFlags, byte_enable);
        }

        if (fault == NoFault) {
            const RiscvISA::vreg_t& tmp_v0 = tc->readVecReg(RegId(VecRegClass, 0));
            auto v0 = tmp_v0.as<uint64_t>();
            for (int i = 0; i < vl; i++) {
                if (vm == 1 || elem_mask(v0, i)) {
                    %(memacc_code)s;
                }
            }
            %(op_wb)s;
        }

        return fault;
    }
}};

def template VMemLoadInitiateAcc {{
    Fault %(class_name)s::initiateAcc(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        %(op_src_decl)s;
        %(op_rd)s;
        %(ea_code)s;

        return initiateMemRead(xc, traceData, EA, Mem, 
            this->memAccessFlags);
    }
}};

def template VMemLoadCompleteAcc {{
    Fault %(class_name)s::completeAcc(PacketPtr pkt, ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;
        auto tc = xc->tcBase();
        size_t vl = RiscvStaticInst::getCurVL(tc);

        %(op_decl)s;
        %(op_rd)s;

        
        STATUS status = xc->readMiscReg(MISCREG_STATUS);
        if (status.vs == static_cast<int>(VPUStatus::OFF))
            fault = std::make_shared<IllegalInstFault>("VPU is off", machInst);

        if (fault == NoFault) {
            memcpy(Mem.as<uint8_t>(), pkt->getPtr<uint8_t>(),
                pkt->getSize());
            const RiscvISA::vreg_t& tmp_v0 =
                tc->readVecReg(RegId(VecRegClass, 0));
            auto v0 = tmp_v0.as<uint64_t>();
            for (int i = 0; i < vl; i++) {
                if (vm == 1 || elem_mask(v0, i)) {
                    %(memacc_code)s;
                }
            }
        }

        if (fault == NoFault) {
            %(op_wb)s;
        }

        return fault;
    }
}};

def template VMemStoreExecute {{
    Fault %(class_name)s::execute(
        ExecContext *xc, Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;
        auto tc = xc->tcBase();
        size_t vl = RiscvStaticInst::getCurVL(tc);
        
        %(op_decl)s;
        %(op_rd)s;
        %(ea_code)s;

        const std::vector<bool> byte_enable(vl * this->sew, true);

        if (fault == NoFault) {
            fault = readMemAtomic(xc, EA, Mem.as<uint8_t>(), 
                vl * this->sew, this->memAccessFlags, byte_enable);
        }

        if (fault == NoFault) {
            const RiscvISA::vreg_t& tmp_v0 = tc->readVecReg(RegId(VecRegClass, 0));
            auto v0 = tmp_v0.as<uint64_t>();
            for (int i = 0; i < vl; i++) {
                if (vm == 1 || elem_mask(v0, i)) {
                    %(memacc_code)s;
                }
            }
            fault = writeMemAtomic(xc, Mem.as<uint8_t>(), EA,
                vl * this->sew, this->memAccessFlags, nullptr, byte_enable);
        }

        if (fault == NoFault) {
            %(postacc_code)s;
            %(op_wb)s;
        }

        return fault;
    }
}};

def template VMemStoreInitiateAcc {{
    Fault %(class_name)s::initiateAcc(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;
        auto tc = xc->tcBase();
        size_t vl = RiscvStaticInst::getCurVL(tc);
        STATUS status = xc->readMiscReg(MISCREG_STATUS);

        %(op_src_decl)s;
        %(op_rd)s;
        %(ea_code)s;

        const std::vector<bool> byte_enable(vl * this->sew, true);

        if (status.vs == static_cast<int>(VPUStatus::OFF))
            fault = std::make_shared<IllegalInstFault>("VPU is off", machInst);
        // read old data
        if (fault == NoFault) {
            fault = readMemAtomic(xc, EA, Mem.as<uint8_t>(), 
                vl * this->sew, this->memAccessFlags, byte_enable);
        }
        if (fault == NoFault) {
            const RiscvISA::vreg_t& tmp_v0 = tc->readVecReg(RegId(VecRegClass, 0));
            auto v0 = tmp_v0.as<uint64_t>();
            for (int i = 0; i < vl; i++) {
                if (vm == 1 || elem_mask(v0, i)) {
                    %(memacc_code)s;
                }
            }
            Fault fault = writeMemAtomic(xc, Mem.as<uint8_t>(), EA,
                vl * this->sew, this->memAccessFlags, nullptr, byte_enable);
        }

        %(op_wb)s;

        return fault;
    }
}};

def template VMemStoreCompleteAcc {{
    Fault %(class_name)s::completeAcc(PacketPtr pkt, ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        return NoFault;
    }
}};

def format VMemLoadOp (
    memacc_code, ea_code = {{EA = Rs1;}},
    mem_flags=[], inst_flags=[]
) {{
    (header_output, decoder_output, decode_block, exec_output) = \
        VMemLoadStoreOpBase(name, Name, ea_code, memacc_code,
        mem_flags, inst_flags, 'VMemLoadOp', exec_template_base='VMemLoad')
}};

def format VMemStoreOp (
    memacc_code, ea_code = {{EA = Rs1;}},
    mem_flags=[], inst_flags=[]
) {{
    (header_output, decoder_output, decode_block, exec_output) = \
        VMemLoadStoreOpBase(name, Name, ea_code, memacc_code,
        mem_flags, inst_flags, 'VMemStoreOp',
        exec_template_base='VMemStore')
}};