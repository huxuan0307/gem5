def format VectorFloatFormat(code, *flags) {{
    iop = InstObjParams(name,
      Name,
      'VectorFloatMacroOp',
      {'code': code},
      flags)
    microiop = InstObjParams(name + "_micro",
      Name + "Micro",
      'VectorFloatMicroOp',
      {'code': code},
      flags)
    header_output = \
        VectorFloatMicroDeclare.subst(microiop) + \
        VectorFloatMicroConstructor.subst(microiop) + \
        VectorFloatMicroExecute.subst(microiop) + \
        VectorFloatMacroDeclare.subst(iop) + \
        VectorFloatMacroConstructor.subst(iop)
    decode_block = VectorFloatDecodeBlock.subst(iop)
}};

def format VectorIntFormat(code, category, *flags) {{
    def setDestWrapper(destRegId):
        return "setDestRegIdx(_numDestRegs++, " + destRegId + ");\n" + \
            "_numVecDestRegs++;\n"
    def setSrcWrapper(srcRegId):
        return "setSrcRegIdx(_numSrcRegs++, " + srcRegId + ");\n"

    iop = InstObjParams(name,
      Name,
      'VectorIntMacroOp',
      {'code': code},
      flags)
    destRegId = "RegId(VecRegClass, extMachInst.vd + _micro_idx)"
    src1RegId = ""
    if category == "OPIVV":
        src1RegId = "RegId(VecRegClass, extMachInst.vs1 + _micro_idx)"
    elif category == 'OPIVX':
        src1RegId = "RegId(IntRegClass, extMachInst.rs1)"
    elif category == 'OPIVI':
        pass
    else:
        print("not supported category for VectorIntFormat:", category)
    src2RegId = "RegId(VecRegClass, extMachInst.vs2 + _micro_idx)"
    setDestRegIdx = setDestWrapper(destRegId)
    setSrcRegIdx = ""
    if category != 'OPIVI':
        setSrcRegIdx += setSrcWrapper(src1RegId)
    setSrcRegIdx += setSrcWrapper(src2RegId)

    microiop = InstObjParams(name + "_micro",
      Name + "Micro",
      'VectorIntMicroOp',
      {'code': code,
       'setDestRegIdx': setDestRegIdx,
       'setSrcRegIdx': setSrcRegIdx},
      flags)

    header_output = \
        VectorIntMicroDeclare.subst(microiop) + \
        VectorIntMicroConstructor.subst(microiop) + \
        VectorIntMicroExecute.subst(microiop) + \
        VectorIntMacroDeclare.subst(iop) + \
        VectorIntMacroConstructor.subst(iop)
    decode_block = VectorIntDecodeBlock.subst(iop)
}};

def format VectorIntMaskFormat(code, category, *flags) {{
    iop = InstObjParams(name,
      Name,
      'VectorIntMaskMacroOp',
      {'code': code},
      flags)
    destRegId = "RegId(VecRegClass, extMachInst.vd)"
    src1RegId = ""
    if category == "OPIVV":
        src1RegId = "RegId(VecRegClass, extMachInst.vs1 + _micro_idx)"
    elif category == "OPIVX":
        src1RegId = "RegId(IntRegClass, extMachInst.rs1)"
    elif category == "OPIVI":
        pass
    else:
        print("not supported category for VectorIntFormat:", category)
    src2RegId = "RegId(VecRegClass, extMachInst.vs2 + _micro_idx)"

    microiop = InstObjParams(name + "_micro",
      Name + "Micro",
      'VectorIntMaskMicroOp',
      {'code': code,
       'destRegId': destRegId,
       'src1RegId': src1RegId,
       'src2RegId': src2RegId},
      flags)
    header_output = \
        VectorIntMaskMicroDeclare.subst(microiop) + \
        VectorIntMaskMicroConstructor.subst(microiop) + \
        VectorIntMaskMicroExecute.subst(microiop) + \
        VectorIntMaskMacroDeclare.subst(iop) + \
        VectorIntMaskMacroConstructor.subst(iop)
    decode_block = VectorIntDecodeBlock.subst(iop)
}};
