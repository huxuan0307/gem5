def format VectorFloatFormat(code, *flags) {{
    iop = InstObjParams(name,
      Name,
      'VectorFloatMacroOp',
      {'code': code},
      flags)
    microiop = InstObjParams(name + "_micro",
      Name + "Micro",
      'VectorFloatMicroOp',
      {'code': code},
      flags)
    header_output = \
        VectorFloatMicroDeclare.subst(microiop) + \
        VectorFloatMicroConstructor.subst(microiop) + \
        VectorFloatMicroExecute.subst(microiop) + \
        VectorFloatMacroDeclare.subst(iop) + \
        VectorFloatMacroConstructor.subst(iop)
    decode_block = VectorFloatDecodeBlock.subst(iop)
}};

def format VectorIntFormat(code, *flags) {{
    iop = InstObjParams(name,
      Name,
      'VectorIntMacroOp',
      {'code': code},
      flags)
    microiop = InstObjParams(name + "_micro",
      Name + "Micro",
      'VectorIntMicroOp',
      {'code': code},
      flags)
    header_output = \
        VectorIntMicroDeclare.subst(microiop) + \
        VectorIntMicroConstructor.subst(microiop) + \
        VectorIntMicroExecute.subst(microiop) + \
        VectorIntMacroDeclare.subst(iop) + \
        VectorIntMacroConstructor.subst(iop)
    decode_block = VectorIntDecodeBlock.subst(iop)
}};

def format VectorIntMaskFormat(code, *flags) {{
    iop = InstObjParams(name,
      Name,
      'VectorIntMaskMacroOp',
      {'code': code},
      flags)
    microiop = InstObjParams(name + "_micro",
      Name + "Micro",
      'VectorIntMaskMicroOp',
      {'code': code},
      flags)
    header_output = \
        VectorIntMaskMicroDeclare.subst(microiop) + \
        VectorIntMaskMicroConstructor.subst(microiop) + \
        VectorIntMaskMicroExecute.subst(microiop) + \
        VectorIntMaskMacroDeclare.subst(iop) + \
        VectorIntMaskMacroConstructor.subst(iop)
    decode_block = VectorIntDecodeBlock.subst(iop)
}};
